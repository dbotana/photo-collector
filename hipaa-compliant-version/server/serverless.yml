service: hipaa-photo-collector-api

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  stage: prod
  memorySize: 512
  timeout: 30
  versionFunctions: false

  # Environment variables (AWS_REGION is automatically provided by Lambda)
  environment:
    NODE_ENV: production
    JWT_SECRET: hipaa-secure-jwt-secret-key-production-2024-minimum-32-chars-photo-collector-v1
    JWT_EXPIRES_IN: 1h
    S3_BUCKET_NAME: dbota-hipaa-photos-prod
    KMS_KEY_ID: 1bd0c1fc-fee9-404e-9277-2cf102c121d8
    S3_ENCRYPTION_KEY_ID: 1bd0c1fc-fee9-404e-9277-2cf102c121d8
    ALLOWED_ORIGINS: https://dbotana.github.io
    AUDIT_SALT: hipaa-audit-salt-2024-production-secure-photo-collector-v1
    LOG_LEVEL: info
    RATE_LIMIT_WINDOW_MS: 900000
    RATE_LIMIT_MAX_REQUESTS: 100
    AUTH_RATE_LIMIT_MAX: 5
    SESSION_SECRET: hipaa-session-secret-production-2024-photo-collector-v1
    SESSION_TIMEOUT: 3600000
    ORGANIZATION_NAME: HIPAA Photo Collector
    COMPLIANCE_OFFICER_EMAIL: compliance@example.com
    BAA_AGREEMENT_ID: hipaa-photo-collector-2024
    MOCK_AUTHENTICATION: false
    SKIP_ENCRYPTION: false
    DEBUG_LOGGING: false

  # IAM permissions
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:PutObject
            - s3:DeleteObject
            - s3:ListBucket
          Resource:
            - "arn:aws:s3:::dbota-hipaa-photos-prod"
            - "arn:aws:s3:::dbota-hipaa-photos-prod/*"
        - Effect: Allow
          Action:
            - kms:Decrypt
            - kms:Encrypt
            - kms:ReEncrypt*
            - kms:GenerateDataKey*
            - kms:DescribeKey
          Resource:
            - "arn:aws:kms:us-east-1:*:key/1bd0c1fc-fee9-404e-9277-2cf102c121d8"
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource:
            - "arn:aws:logs:us-east-1:*:*"

functions:
  api:
    handler: lambda.handler
    events:
      - httpApi:
          path: /{proxy+}
          method: any
      - httpApi:
          path: /
          method: any
    environment:
      # Additional function-specific environment variables if needed

plugins:
  - serverless-offline

custom:
  serverless-offline:
    httpPort: 3000

# Package configuration
package:
  patterns:
    - '!tests/**'
    - '!coverage/**'
    - '!node_modules/aws-sdk/**'  # AWS SDK is provided by Lambda
    - '!*.test.js'
    - '!jest.config.js'
    - '!.env*'
    - '!README.md'